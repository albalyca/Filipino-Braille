import os
import cv2
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image
from skimage import io, color, exposure
from skimage.transform import resize
from skimage.feature import hog
from skimage.io import imread

folder_path = 'insert/path/here'

for filename in os.listdir(folder_path):
    if filename.endswith('.JPG') or filename.endswith('.jpg'):  
        image_path = os.path.join(folder_path, filename)
        original_image = cv2.imread(image_path)
        gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
        blurred = cv2.GaussianBlur(gray, (7,7), 0)
        actual_thresh = np.max(gray)/2
        threshold = math.ceil(actual_thresh)
        otsu_tv, otsu_thresh = cv2.threshold(blurred, threshold, 255, 
                                cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        inverted_otsu = ~otsu_thresh
        min_ones_area = 200 
        num_labels, labels, stats, centroids = 
        cv2.connectedComponentsWithStats(inverted_otsu)
        for label in range(1, num_labels):
            if stats[label, cv2.CC_STAT_AREA] < min_ones_area:
                inverted_otsu[labels == label] = 0
        contours, _ = cv2.findContours(inverted_otsu, cv2.RETR_EXTERNAL, 
                        cv2.CHAIN_APPROX_SIMPLE)
        concatenated = np.concatenate(contours)
        x, y, w, h = cv2.boundingRect(concatenated)
        cv2.rectangle(gray, (x, y), (x + w - 1, y + h - 1), 255, 2)
        cropped = inverted_otsu[y:y+h, x:x+w]
        resized = resize(cropped, (64, 128))
        resized *= 255  
        resized = resized.astype(np.uint8)  
        processed_image = resized
        cv2.imwrite(image_path, processed_image)

        print(f"Processed {filename} and replaced.")

print("All images processed and replaced.")
